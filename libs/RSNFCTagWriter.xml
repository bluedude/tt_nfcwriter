<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.02</doclet-version-NOT-library-version>
    <class>
        <name>com.rootsoft.rsnfctagwriter.RSNFCTagWriter</name>
        <shortname>RSNFCTagWriter</shortname>
        <owner>activity</owner>
        <method>
            <name>Initialize</name>
            <comment>Initializes the RSNFCTagWriter.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>DisableForegroundDispatch</name>
            <comment>Disables the foreground dispatching.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>EnableForegroundDispatch</name>
            <comment>Enables the foreground dispatching of NFC to this activity.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ArrayCopy</name>
            <comment>Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>src</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>srcPos</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>dest</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>destPos</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>length</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Write</name>
            <comment>Writes the message to the given tag.
tag: The tag to write to
message: The message to be written</comment>
            <returntype>void</returntype>
            <parameter>
                <name>tag</name>
                <type>android.nfc.Tag</type>
            </parameter>
            <parameter>
                <name>message</name>
                <type>android.nfc.NdefMessage</type>
            </parameter>
        </method>
        <method>
            <name>getTag</name>
            <comment>Gets the tag.
 First you should register an IntentFilter with the manifest editor.
 Returns null if no tag was found.</comment>
            <returntype>android.nfc.Tag</returntype>
            <parameter>
                <name>intent</name>
                <type>anywheresoftware.b4a.objects.IntentWrapper</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.rootsoft.rsnfctagwriter.RSNFCTag</name>
        <shortname>RSNFCTag</shortname>
        <objectwrapper>android.nfc.Tag</objectwrapper>
        <owner>process</owner>
        <method>
            <name>ToString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>DescribeContents</name>
            <comment>Descrobe the content of this tag.
Return type: @return:</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>TechList</name>
            <returntype>java.lang.String[]</returntype>
            <comment>Gets the tech list of this tag.</comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>byte[]</returntype>
            <comment>Gets the id of this tag.</comment>
        </property>
    </class>
    <class>
        <name>com.rootsoft.rsnfctagwriter.RSNFCRecord</name>
        <shortname>RSNFCRecord</shortname>
        <objectwrapper>android.nfc.NdefRecord</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Initialize</name>
            <comment>Initializes this Ndef Record.
 NDEF (NFC Data Exchange Format) is a light-weight binary format, used to encapsulate typed data. 
 It is specified by the NFC Forum, for transmission and storage with NFC, however it is transport agnostic.
 
 NDEF defines messages and records. 
 An NDEF Record contains typed data, such as MIME-type media, a URI, or a custom application payload. 
 An NDEF Message is a container for one or more NDEF Records.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>tnf</name>
                <type>short</type>
            </parameter>
            <parameter>
                <name>type</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>id</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>payload</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>ToMimeType</name>
            <comment>Map this record to a MIME type, or return null if it cannot be mapped.
 Currently this method considers all TNF_MIME_MEDIA records to be MIME records, as well as some TNF_WELL_KNOWN records such as RTD_TEXT. 
 If this is a MIME record then the MIME type as string is returned, otherwise null is returned.
 This method does not perform validation that the MIME type is actually valid. 
 It always attempts to return a string containing the type if this is a MIME record.
 The returned MIME type will by normalized to lower-case using normalizeMimeType(String).
 The MIME payload can be obtained using getPayload().
Return type: @return:</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Payload</name>
            <returntype>byte[]</returntype>
            <comment>Returns the variable length payload.
 Returns an empty byte array if this record does not have a payload field.</comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>byte[]</returntype>
            <comment>Returns the variable length Type field.
 This should be used in conjunction with the TNF field to determine the payload format.
 Returns an empty byte array if this record does not have a type field.</comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>byte[]</returntype>
            <comment>Returns the variable length ID.
 Returns an empty byte array if this record does not have an id field.</comment>
        </property>
        <property>
            <name>Tnf</name>
            <returntype>short</returntype>
            <comment>Returns the 3-bit TNF.
 TNF is the top-level type.</comment>
        </property>
        <field>
            <name>RTD_ALTERNATIVE_CARRIER</name>
            <comment></comment>
            <returntype>byte[]</returntype>
        </field>
        <field>
            <name>RTD_HANDOVER_SELECT</name>
            <comment></comment>
            <returntype>byte[]</returntype>
        </field>
        <field>
            <name>TNF_EMPTY</name>
            <comment></comment>
            <returntype>short</returntype>
        </field>
        <field>
            <name>TNF_UNCHANGED</name>
            <comment></comment>
            <returntype>short</returntype>
        </field>
        <field>
            <name>RTD_HANDOVER_CARRIER</name>
            <comment></comment>
            <returntype>byte[]</returntype>
        </field>
        <field>
            <name>TNF_MIME_MEDIA</name>
            <comment></comment>
            <returntype>short</returntype>
        </field>
        <field>
            <name>TNF_UNKNOWN</name>
            <comment></comment>
            <returntype>short</returntype>
        </field>
        <field>
            <name>RTD_URI</name>
            <comment></comment>
            <returntype>byte[]</returntype>
        </field>
        <field>
            <name>RTD_SMART_POSTER</name>
            <comment></comment>
            <returntype>byte[]</returntype>
        </field>
        <field>
            <name>RTD_TEXT</name>
            <comment></comment>
            <returntype>byte[]</returntype>
        </field>
        <field>
            <name>TNF_EXTERNAL_TYPE</name>
            <comment></comment>
            <returntype>short</returntype>
        </field>
        <field>
            <name>TNF_ABSOLUTE_URI</name>
            <comment></comment>
            <returntype>short</returntype>
        </field>
        <field>
            <name>RTD_HANDOVER_REQUEST</name>
            <comment></comment>
            <returntype>byte[]</returntype>
        </field>
        <field>
            <name>TNF_WELL_KNOWN</name>
            <comment></comment>
            <returntype>short</returntype>
        </field>
    </class>
    <class>
        <name>com.rootsoft.rsnfctagwriter.RSNFCNdefFormatable</name>
        <shortname>RSNFCNdefFormatable</shortname>
        <objectwrapper>android.nfc.tech.NdefFormatable</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Connect</name>
            <comment>Enable I/O operations to the tag from this TagTechnology object.
 May cause RF activity and may block. Must not be called from the main application thread. A blocked call will be canceled with IOException by calling close() from another thread.
 Only one TagTechnology object can be connected to a Tag at a time.
 Applications must call close() when I/O operations are complete.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Provide access to NDEF format operations on a Tag.
 Acquire a NdefFormatable object using get(Tag).
 Android devices with NFC must only enumerate and implement this class for tags for which it can format to NDEF.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>tag</name>
                <type>android.nfc.Tag</type>
            </parameter>
        </method>
        <method>
            <name>Format</name>
            <comment>Format a tag as NDEF, and write a NdefMessage.
 This is a multi-step process, an IOException is thrown if any one step fails.
 The card is left in a read-write state after this operation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>firstMessage</name>
                <type>android.nfc.NdefMessage</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment>Disable I/O operations to the tag from this TagTechnology object, and release resources.
 Also causes all blocked I/O operations on other thread to be canceled and return with IOException.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>isConnected</name>
            <comment>Helper to indicate if I/O operations should be possible.
 Returns true if connect() has completed, and close() has not been called, and the Tag is not known to be out of range.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Tag</name>
            <returntype>android.nfc.Tag</returntype>
            <comment>Get the Tag object backing this TagTechnology object.</comment>
        </property>
    </class>
    <class>
        <name>com.rootsoft.rsnfctagwriter.RSNFCNdef</name>
        <shortname>RSNFCNdef</shortname>
        <objectwrapper>android.nfc.tech.Ndef</objectwrapper>
        <owner>process</owner>
        <permission>android.permission.NFC</permission>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>tag</name>
                <type>android.nfc.Tag</type>
            </parameter>
        </method>
        <method>
            <name>WriteNdefMessage</name>
            <comment>Overwrite the NdefMessage on this tag.
 This is an I/O operation and will block until complete. 
 It must not be called from the main application thread.
 A blocked call will be canceled with IOException if close() is called from another thread.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>msg</name>
                <type>android.nfc.NdefMessage</type>
            </parameter>
        </method>
        <method>
            <name>isWritable</name>
            <comment>Determine if the tag is writable.
 NFC Forum tags can be in read-only or read-write states.
 Does not cause any RF activity and does not block.
Return type: @return:</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Connect</name>
            <comment>Enable I/O operations to the tag from this TagTechnology object.
 May cause RF activity and may block. Must not be called from the main application thread. A blocked call will be canceled with IOException by calling close() from another thread.
 Only one TagTechnology object can be connected to a Tag at a time.
 Applications must call close() when I/O operations are complete.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Close</name>
            <comment>Disable I/O operations to the tag from this TagTechnology object, and release resources.
 Also causes all blocked I/O operations on other thread to be canceled and return with IOException.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>MakeReadOnly</name>
            <comment>Make a tag read-only.
 This sets the CC field to indicate the tag is read-only, and where possible permanently sets the lock bits to prevent any further modification of the memory.
 This is a one-way process and cannot be reverted!</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>isConnected</name>
            <comment>Helper to indicate if I/O operations should be possible.
 Returns true if connect() has completed, and close() has not been called, and the Tag is not known to be out of range.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>CanMakeReadOnly</name>
            <comment>Indicates whether a tag can be made read-only with makeReadOnly().
 Does not cause any RF activity and does not block.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>NdefMessage</name>
            <returntype>android.nfc.NdefMessage</returntype>
            <comment>Read the current NdefMessage on this tag.
 This always reads the current NDEF Message stored on the tag.
 Note that this method may return null if the tag was in the INITIALIZED state as defined by NFC Forum,
 as in that state the tag is formatted to support NDEF but does not contain a message yet.</comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <comment>Get the NDEF tag type.
 Returns one of NFC_FORUM_TYPE_1, NFC_FORUM_TYPE_2, NFC_FORUM_TYPE_3, NFC_FORUM_TYPE_4, MIFARE_CLASSIC 
 or another NDEF tag type that has not yet been formalized in this Android API.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>android.nfc.Tag</returntype>
            <comment>Get the Tag object backing this TagTechnology object.</comment>
        </property>
        <property>
            <name>MaxSize</name>
            <returntype>int</returntype>
            <comment>Get the maximum NDEF message size in bytes.</comment>
        </property>
        <property>
            <name>CachedNdefMessage</name>
            <returntype>android.nfc.NdefMessage</returntype>
            <comment>Get the NdefMessage that was read from the tag at discovery time.
 If the NDEF Message is modified by an I/O operation then it will not be updated here, 
 this function only returns what was discovered when the tag entered the field.</comment>
        </property>
    </class>
    <class>
        <name>com.rootsoft.rsnfctagwriter.RSNFCMessage</name>
        <shortname>RSNFCMessage</shortname>
        <objectwrapper>android.nfc.NdefMessage</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Initialize</name>
            <comment>Represents an immutable NDEF Message.
 NDEF (NFC Data Exchange Format) is a light-weight binary format, used to encapsulate typed data. 
 It is specified by the NFC Forum, for transmission and storage with NFC, however it is transport agnostic.
 NDEF defines messages and records. An NDEF Record contains typed data, such as MIME-type media, a URI, or a custom application payload. 
 An NDEF Message is a container for one or more NDEF Records.
 When an Android device receives an NDEF Message (for example by reading an NFC tag) 
 it processes it through a dispatch mechanism to determine an activity to launch. The type of the first record in the message has 
 special importance for message dispatch, so design this record carefully.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>record</name>
                <type>android.nfc.NdefRecord</type>
            </parameter>
        </method>
        <method>
            <name>ByteArray</name>
            <comment>Return this NDEF Message as raw bytes.
 The NDEF Message is formatted as per the NDEF 1.0 specification, and the byte array is suitable for network transmission or storage in an NFC Forum NDEF compatible tag.
 This method will not chunk any records, and will always use the short record (SR) format and omit the identifier field when possible.</comment>
            <returntype>byte[]</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Records</name>
            <returntype>android.nfc.NdefRecord[]</returntype>
            <comment>Get the NDEF Records inside this NDEF Message.</comment>
        </property>
        <property>
            <name>ByteArrayLength</name>
            <returntype>int</returntype>
            <comment>Return the length of this NDEF Message if it is written to a byte array with toByteArray().
 An NDEF Message can be formatted to bytes in different ways depending on chunking, SR, and ID flags, 
 so the length returned by this method may not be equal to the length of the original byte array used to construct this NDEF Message. 
 However it will always be equal to the length of the byte array produced by toByteArray().</comment>
        </property>
    </class>
    <version>1.0</version>
    <author>XverhelstX</author>
</root>
